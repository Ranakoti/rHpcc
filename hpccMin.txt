eclhost<-function (hostName, port= "8008" , clusterName = "thor", eclCode) 
{
  if (is.null(hostName) || !nzchar(trim(hostName))) {
    stop("HostName required")
  }
  else {
    urlString <- (paste("http://", hostName, ":", port, "/EclDirect/RunEcl", 
                       sep = ""))
    content <- postForm(urlString, eclText = enc2utf8(eclCode), 
                        cluster = enc2utf8(clusterName))
    content
  }
}
eclrresult<-function (xmlResult, downloadPath, format) 
{
  data
  if (missing(xmlResult)) {
    stop("Empty XML String.")
  }
  else {
    docRoot = xmlRoot(xmlTreeParse(contentcsv))
    nodes = getNodeSet(docRoot, "//Dataset")
    for (i in 1:length(nodes)) {
      datasetNode <- nodes[[i]]
      resultSetName = xmlGetAttr(datasetNode, "name")
      x <- array(1:length(datasetNode) * length(datasetNode[[1]]), 
                 dim = c(length(datasetNode), length(datasetNode[[1]])))
      for (j in 1:length(datasetNode)) {
        rowNode <- datasetNode[[j]]
        for (k in 1:length(rowNode)) {
          actualNode <- rowNode[[k]]
          x[j, k] <- xmlValue(actualNode)
        }
      }
      if (!missing(downloadPath)) {
        if (missing(format)) {
          fileName <- paste(resultSetName, ".csv", sep = "")
          path <- paste(downloadPath, "/", fileName, 
                        sep = "")
          write.table(x, file = path, sep = ",", row.names = F, 
                      col.names = F)
          assign(resultSetName, x,envir = .GlobalEnv)
          
        }
        else {
          fileName <- paste(resultSetName, ".xml", sep = "")
          path <- paste(downloadPath, "/", fileName, 
                        sep = "")
          write.table(xmlResult, file = path, sep = ",", 
                      row.names = F, col.names = F)
        }
      }
      data <- x
      data = as.data.frame(data, stringsAsFactors = FALSE)
    }
    data
  }
}


hpccMin<-function(x,v){

trim<-function (x) 
{
    gsub("^\\s+|\\s+$", "", x)
}

  n<<-strsplit(v, ",")
  xyz <<- ""
  xyz <<- paste(xyz,paste("IMPORT Std;"),"\n")
  xyz <<- paste(xyz,paste("myddata :=RECORD"),"\n")
  for (i in 1:length(n[[1]]))
  {
    j<-trim(n[[1]][i])
    var1<-j 
    xyz <<- paste(xyz,paste(c(var1)),";","\n")
  }
  xyz <<- paste(xyz,paste(("END;"),"\n"))
  xyz <<- paste(xyz,paste("ds := DATASET('~",x,"'",sep="",",myddata, THOR);","\n"))
  
 str1<-NULL
 str2<-NULL
 for (i in 1:length(n[[1]]))
  {
     k<-trim(n[[1]][i])
     l<-gsub(' {2,}',' ',k)
     h<<-strsplit(l," ")
     if (i > 1)
     {
         charh<-paste("'",h[[1]][2],"'",sep="")
	 str1<-trim(paste(str1,charh,sep=","))
         hh<-trim(paste("LEFT.",h[[1]][2],sep=""))
         str2<-trim(paste(str2,hh,sep=","))
     }
     else
     {   
	 charh<-paste("'",h[[1]][2],"'",sep="")
         str1<-trim(paste(str1,charh))
         hh<-trim(paste("LEFT.",h[[1]][2],sep=""))
         str2<-trim(paste(str2,hh))
     }	
     
  }
	
	xyz<<-paste(xyz,paste("rec :=RECORD"),"\n")
	xyz<<-paste(xyz,paste("INTEGER3 id;"),"\n")
	xyz<<-paste(xyz,paste("DS;"),"\n")
	xyz<<-paste(xyz,paste("END;"),"\n")
	xyz<<-paste(xyz,paste("REC mytrans (DS L, INTEGER C) := TRANSFORM"),"\n")
	xyz<<-paste(xyz,paste("SELF.id :=C;"),"\n")
	xyz<<-paste(xyz,paste("SELF :=L;"),"\n")
	xyz<<-paste(xyz,paste("END;"),"\n")
	xyz<<-paste(xyz,paste("DSR:=PROJECT(DS,mytrans(LEFT,COUNTER));"),"\n")
	xyz<<-paste(xyz,paste("DSR;"),"\n")
	xyz<<-paste(xyz,paste("NumField:=RECORD"),"\n")
	xyz<<-paste(xyz,paste("UNSIGNED id;"),"\n")
	xyz<<-paste(xyz,paste("STRING number;"),"\n")
	xyz<<-paste(xyz,paste("REAL8 value;"),"\n")
	xyz<<-paste(xyz,paste("END;"),"\n")
	xyz<<-paste(xyz,paste("OutDs:=NORMALIZE(DSR,",length(n[[1]]),",TRANSFORM(NumField,SELF.id:=LEFT.id,SELF.number:=CHOOSE(COUNTER,",str1,sep="",");SELF.value:=CHOOSE(COUNTER,",str2,")));","\n"))
	xyz<<-paste(xyz,paste("OutDs;"),"\n")
	xyz<<-paste(xyz,paste("SingleField := RECORD"),"\n")
	xyz<<-paste(xyz,paste("OutDS.number;"),"\n")
	xyz<<-paste(xyz,paste("Mini   := MIN(GROUP,OutDS.value);"),"\n")
	xyz<<-paste(xyz,paste("END;"),"\n")
	xyz<<-paste(xyz,paste("SingleUni   := TABLE(OutDS,SingleField,number);"),"\n")
	xyz<<-paste(xyz,paste("output(SingleUni,named('minOfvar'));"))

  
  fileout<-getwd()
  str<-.libPaths()
  str1<-paste(str,"/rtoHpcc/hostsetting.txt",sep="")
  tt<-read.table(str1,sep="\t")
  f1<-as.character(tt$V1[[1]])
  f2<-as.character(tt$V1[[2]])
  contentcsv<<-eclhost(hostName=f1, port=f2,eclCode=xyz)
  data <- eclrresult(contentcsv, downloadPath=fileout)	
}

